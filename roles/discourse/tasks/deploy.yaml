---

# Create the namespace and other basic materials

- name: Create namespace ({{ d_namespace }})
  k8s:
    definition: "{{ lookup('template', 'namespace.yaml.j2') }}"
    wait: yes

- name: Create namespace material
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
  loop:
  - serviceaccount
  - role
  - rolebinding-d-sa

- name: Relax {{ d_namespace }} 'default' service account (for cert-manager)
  k8s:
    definition: "{{ lookup('template', 'rolebinding-default-sa.yaml.j2') }}"
    wait: yes

# Volumes

- name: Get {{ d_vol_storageclass }} StorageClass
  k8s_info:
    kind: StorageClass
    name: "{{ d_vol_storageclass }}"
  register: sc_result
  when: d_vol_storageclass != " "

- name: Assert {{ d_vol_storageclass }} StorageClass
  assert:
    that: sc_result.resources|length == 1
    fail_msg: The {{ d_vol_storageclass }} StorageClass must be available on the cluster
  when: d_vol_storageclass != " "

- name: Create volume claim ({{ d_vol_storageclass }})
  k8s:
    definition: "{{ lookup('template', 'pvc.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"

# Best practice ... wait for the PVC to bind.
# e.g. wait until resources[0].status.phase == Bound (initially Pending)

- name: Wait for volume claim to bind
  k8s_info:
    kind: PersistentVolumeClaim
    name: discourse
    namespace: "{{ d_namespace }}"
  register: d_pvc_result
  until: >-
    d_pvc_result.resources|length > 0
    and d_pvc_result.resources[0].status is defined
    and d_pvc_result.resources[0].status.phase is defined
    and d_pvc_result.resources[0].status.phase == 'Bound'
  delay: 5
  retries: "{{ (bind_timeout|int / 5)|int }}"
  when: wait_for_bind|bool

# Deploy the application

- name: Deploy Discourse ({{ d_hostname }})
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ pod_ready_timeout }}"
  loop:
  - statefulset
  - service
  - ingress
