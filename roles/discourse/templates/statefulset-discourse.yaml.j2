---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: discourse
  namespace: {{ d_namespace }}
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: discourse
  serviceName: discourse
  template:
    metadata:
      name: discourse
      labels:
        name: discourse
    spec:
      serviceAccountName: discourse

      # A 'preferred' (not guaranteed)
      # node selection affinity...
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: purpose
                operator: In
                values:
                - {{ d_node_purpose }}

      containers:

      # Discourse Container
      #
      - name: discourse
        image: {{ d_image_name }}:{{ d_image_tag }}
        imagePullPolicy: IfNotPresent
        terminationMessagePolicy: FallbackToLogsOnError
        ports:
        - containerPort: 3000
          name: http
#        readinessProbe:
#          httpGet:
#            path: /
#            port: http
#          initialDelaySeconds: 30
#          timeoutSeconds: 5
#          failureThreshold: 6
#        livenessProbe:
#          httpGet:
#            path: /
#            port: http
#          initialDelaySeconds: 600
#          timeoutSeconds: 5
#          failureThreshold: 60
        env:
        # Discourse details
        - name: DISCOURSE_USERNAME
          value: '{{ d_username }}'
        - name: DISCOURSE_PASSWORD
          value: '{{ d_password }}'
        - name: DISCOURSE_EMAIL
          value: '{{ d_email }}'
        - name: DISCOURSE_SITENAME
          value: '{{ d_sitename }}'
        - name: DISCOURSE_HOSTNAME
          value: '{{ d_hostname }}'
        - name: DISCOURSE_SKIP_INSTALL
{% if d_skip_install %}
          value: 'yes'
{% else %}
          value: 'no'
{% endif %}
        - name: DISCOURSE_PASSENGER_SPAWN_METHOD
          value: 'direct'
        - name: DISCOURSE_PORT_NUMBER
          value: '3000'
        # PostgreSQL details
        - name: POSTGRESQL_ROOT_USER
          value: 'postgres'
        - name: POSTGRESQL_ROOT_PASSWORD
          value: '{{ d_pg_root_password }}'
        - name: POSTGRESQL_HOST
          value: 'postgres'
        - name: POSTGRESQL_PORT_NUMBER
          value: '5432'
        - name: DISCOURSE_POSTGRESQL_USERNAME
          value: '{{ d_discourse_pg_username }}'
        - name: DISCOURSE_POSTGRESQL_PASSWORD
          value: '{{ d_discourse_pg_password }}'
        - name: DISCOURSE_POSTGRESQL_NAME
          value: '{{ d_discourse_pg_name }}'
        # Redis details
        - name: REDIS_HOST
          value: 'redis'
        - name: REDIS_PORT_NUMBER
          value: '6379'
        - name: REDIS_PASSWORD
          value: '{{ d_redis_password }}'
{% if d_smtp_host not in ['SetMe'] %}
        # SMTP details
        - name: SMTP_HOST
          value: '{{ d_smtp_host }}'
        - name: SMTP_PORT
          value: '{{ d_smtp_port }}'
{% if d_smtp_user not in ['SetMe'] %}
        - name: SMTP_USER
          value: '{{ d_smtp_user }}'
        - name: SMTP_AUTH
          value: 'login'
{% if d_smtp_password not in ['SetMe'] %}
        - name: SMTP_PASSWORD
          value: '{{ d_smtp_password }}'
{% endif %}
{% else %}
        - name: SMTP_AUTH
          value: 'no'
{% endif %}
{% endif %}
        # Debug
        - name: NAMI_LOG_LEVEL
          value: '{{ d_image_log_level }}'
        resources:
          limits:
            cpu: 500m
          requests:
            cpu: 250m
            memory: 500Mi
        volumeMounts:
        - mountPath: /bitnami/discourse
          subPath: discourse
          name: discourse-data

      # Discourse Sidekiq Container
      #
      - name: discourse-sidekiq
        image: {{ d_image_name }}:{{ d_image_tag }}
        imagePullPolicy: IfNotPresent
        terminationMessagePolicy: FallbackToLogsOnError
        command:
        - /app-entrypoint.sh
        args:
        - nami
        - start
        - --foreground
        - discourse-sidekiq
#        readinessProbe:
#          exec:
#            command:
#            - /bin/sh
#            - -c
#            - nami status discourse-sidekiq
#          initialDelaySeconds: 30
#          timeoutSeconds: 5
#          failureThreshold: 6
#        livenessProbe:
#          exec:
#            command:
#            - /bin/sh
#            - -c
#            - nami status discourse-sidekiq
#          initialDelaySeconds: 500
#          timeoutSeconds: 5
#          failureThreshold: 6
        env:
        # Discourse details
        - name: DISCOURSE_HOST
          value: 'localhost'
        - name: DISCOURSE_PORT
          value: '3000'
        - name: DISCOURSE_HOSTNAME
          value: '{{ d_hostname }}'
        # PostgreSQL details
        - name: POSTGRESQL_HOST
          value: 'postgres'
        - name: POSTGRESQL_PORT_NUMBER
          value: '5432'
        - name: DISCOURSE_POSTGRESQL_USERNAME
          value: '{{ d_discourse_pg_username }}'
        - name: DISCOURSE_POSTGRESQL_PASSWORD
          value: '{{ d_discourse_pg_password }}'
        - name: DISCOURSE_POSTGRESQL_NAME
          value: '{{ d_discourse_pg_name }}'
        # Redis details
        - name: REDIS_HOST
          value: 'redis'
        - name: REDIS_PORT_NUMBER
          value: '6379'
        - name: REDIS_PASSWORD
          value: '{{ d_redis_password }}'
{% if d_smtp_host not in ['SetMe'] %}
        # SMTP details
        - name: SMTP_HOST
          value: '{{ d_smtp_host }}'
        - name: SMTP_PORT
          value: '{{ d_smtp_port }}'
{% if d_smtp_user not in ['SetMe'] %}
        - name: SMTP_USER
          value: '{{ d_smtp_user }}'
        - name: SMTP_AUTH
          value: 'login'
{% if d_smtp_password not in ['SetMe'] %}
        - name: SMTP_PASSWORD
          value: '{{ d_smtp_password }}'
{% endif %}
{% else %}
        - name: SMTP_AUTH
          value: 'no'
{% endif %}
{% endif %}
        # Debug
        - name: NAMI_LOG_LEVEL
          value: '{{ d_image_log_level }}'
        resources:
          limits:
            cpu: 500m
          requests:
            cpu: 100m
            memory: 500Mi
        volumeMounts:
        - mountPath: /bitnami/discourse
          subPath: discourse
          name: discourse-data

      volumes:
      - name: discourse-data
        persistentVolumeClaim:
          claimName: discourse
